# Required Environment Variables
TOKEN=your-hmac-token-here
WORKER_ADDRESS_DOWNLOAD=https://worker1.example.com,https://worker2.example.com

# Optional Environment Variables

# UNDER_ATTACK (default: false)
# Enable Cloudflare Turnstile protection for high-security scenarios
# When true, requires TURNSTILE_SITE_KEY and TURNSTILE_SECRET_KEY
UNDER_ATTACK=false

# FAST_REDIRECT (default: false)
# Enable fast redirect mode: directly 302 redirect to download URL without rendering landing page
# Only effective when UNDER_ATTACK=false
# When true, users will be immediately redirected to the download worker
# When false, users will see the landing page and need to click to download
FAST_REDIRECT=false

# TURNSTILE_SITE_KEY (required when UNDER_ATTACK=true)
# Cloudflare Turnstile site key for bot protection
TURNSTILE_SITE_KEY=

# TURNSTILE_SECRET_KEY (required when UNDER_ATTACK=true)
# Cloudflare Turnstile secret key for verification
TURNSTILE_SECRET_KEY=

# SIGN_SECRET (optional)
# Custom secret for HMAC signature generation
# If not set, will use TOKEN as the secret
SIGN_SECRET=

# IPV4_ONLY (default: false)
# When true, blocks IPv6 access and only allows IPv4
IPV4_ONLY=false

# VERIFY_HEADER (optional)
# Custom header name for additional verification
VERIFY_HEADER=

# VERIFY_SECRET (optional)
# Custom header value for additional verification
VERIFY_SECRET=

# ===== Path Blacklist/Whitelist Configuration =====

# BLACKLIST_PREFIX (optional)
# Comma-separated list of path prefixes to blacklist
# Example: BLACKLIST_PREFIX=/private,/admin,/secret
# Paths matching these prefixes will be subject to BLACKLIST_ACTION
BLACKLIST_PREFIX=

# WHITELIST_PREFIX (optional)
# Comma-separated list of path prefixes to whitelist
# Example: WHITELIST_PREFIX=/public,/shared,/download
# Paths matching these prefixes will be subject to WHITELIST_ACTION
WHITELIST_PREFIX=

# BLACKLIST_ACTION (optional)
# Action to take for blacklisted paths. Valid values:
#   - block: Return 403 Forbidden, deny all access
#   - verify: Force Turnstile verification regardless of UNDER_ATTACK setting
#   - pass-web: Bypass verification, force render landing page (ignore FAST_REDIRECT)
#   - pass-server: Bypass verification, force 302 redirect (ignore UNDER_ATTACK)
#   - pass-asis: Bypass verification, respect FAST_REDIRECT setting
# Example: BLACKLIST_ACTION=block
BLACKLIST_ACTION=

# WHITELIST_ACTION (optional)
# Action to take for whitelisted paths. Valid values: (same as BLACKLIST_ACTION)
#   - block: Return 403 Forbidden
#   - verify: Force Turnstile verification
#   - pass-web: Bypass verification, render landing page
#   - pass-server: Bypass verification, force 302 redirect
#   - pass-asis: Bypass verification, respect FAST_REDIRECT
# Example: WHITELIST_ACTION=pass-asis
WHITELIST_ACTION=

# EXCEPT_PREFIX (optional)
# Comma-separated list of path prefixes for inverse matching
# Example: EXCEPT_PREFIX=/guest,/public
# Paths matching these prefixes will be EXCEPTED from the EXCEPT_ACTION
EXCEPT_PREFIX=

# EXCEPT_ACTION (optional)
# Inverse action for paths. Must be in format: {action}-except
# Valid formats:
#   - block-except: Block all paths EXCEPT those matching EXCEPT_PREFIX
#   - verify-except: Require verification for all EXCEPT those matching EXCEPT_PREFIX
#   - pass-web-except: Force landing page for all EXCEPT those matching EXCEPT_PREFIX
#   - pass-server-except: Force redirect for all EXCEPT those matching EXCEPT_PREFIX
#   - pass-asis-except: Bypass verification for all EXCEPT those matching EXCEPT_PREFIX
# Example: EXCEPT_ACTION=block-except
# Result: Paths matching EXCEPT_PREFIX are allowed, all others are blocked
EXCEPT_ACTION=

# PRIORITY: When a path matches multiple lists, priority is:
# BLACKLIST > WHITELIST > EXCEPT > DEFAULT
# The action from the highest priority match is executed.

# ===== PostgreSQL IP Subnet Rate Limiting Configuration =====

# POSTGRES_URL (optional)
# PostgreSQL connection URL for rate limiting (e.g., Neon Serverless Postgres)
# Example: postgresql://user:password@host/database?sslmode=require
# If not set or empty, rate limiting is disabled
POSTGRES_URL=

# IPSUBNET_WINDOWTIME_LIMIT (optional)
# Maximum number of requests allowed per IP subnet within WINDOW_TIME
# Must be a positive integer. If not set or 0, rate limiting is disabled
# Example: 100 means max 100 requests per subnet per time window
IPSUBNET_WINDOWTIME_LIMIT=

# WINDOW_TIME (optional)
# Sliding time window for rate limiting
# Format: {number}{unit} where unit is h (hour), m (minute), or s (second)
# Examples: 24h, 4h, 30m, 10s
# If not set or empty, rate limiting is disabled
WINDOW_TIME=

# IPV4_SUFFIX (optional, default: /32)
# IPv4 subnet mask for rate limiting granularity
# Examples: /24 (256 IPs), /32 (single IP)
IPV4_SUFFIX=/32

# IPV6_SUFFIX (optional, default: /60)
# IPv6 subnet mask for rate limiting granularity
# Examples: /56, /60, /64
IPV6_SUFFIX=/60

# PG_ERROR_HANDLE (optional, default: fail-closed)
# How to handle PostgreSQL connection/query errors
# Options:
#   - fail-closed: Reject requests when database errors occur (more secure)
#   - fail-open: Allow requests when database errors occur (more available)
PG_ERROR_HANDLE=fail-closed

# CLEANUP_PERCENTAGE (optional, default: 1)
# Probability (in percentage) of triggering database cleanup on each request
# Range: 0-100 (0 = never, 100 = always, 1 = 1% chance)
# Cleanup removes records older than WINDOW_TIME * 2
# Higher values = more frequent cleanup but more database load
# Examples: 1 (1% default), 5 (5% aggressive), 0.1 (0.1% conservative)
CLEANUP_PERCENTAGE=1

# RATE LIMITING NOTES:
# - All three variables (POSTGRES_URL, IPSUBNET_WINDOWTIME_LIMIT, WINDOW_TIME) must be set to enable rate limiting
# - Rate limiting only applies to /info endpoint and fast redirect requests
# - Uses SHA256 hash of IP subnet as database primary key
# - Implements sliding time window algorithm
# - When limit is reached, returns HTTP 429 with Retry-After header
